{"version":3,"sources":["logo.svg","components/regression-display.js","components/about-comp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RegressionTable","props","Table","dark","data","map","value","index","key","scope","RegressionGraph","width","height","margin","top","right","bottom","left","type","dataKey","name","cursor","strokeDasharray","fill","RegressionDisplay","state","predictDiscount","bind","fetch","then","res","json","console","log","time","toString","this","setState","formData","JSON","stringify","Number","method","body","headers","response","predPoint","predictions","Container","Row","Col","sm","Form","FormGroup","Label","for","Input","onChange","e","onInputChange","target","placeholder","Button","onClick","Component","AboutComp","Card","CardTitle","href","style","color","App","useState","className","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6MAAAA,EAAOC,QAAU,IAA0B,kC,+QCIrCC,EAAkB,SAACC,GACvB,OACE,kBAACC,EAAA,EAAD,CAAOC,MAAI,GACT,+BACE,4BACE,iCACA,4CACA,+CAGJ,+BAEIF,EAAMG,KAAKC,KAAI,SAACC,EAAOC,GACrB,OACE,wBAAIC,IAAKD,GACP,wBAAIE,MAAM,OAAOF,EAAQ,GACzB,4BAAKD,EAAK,cACV,4BAAKA,EAAK,sBAUpBI,EAAkB,SAACT,GACvB,OACE,kBAAC,IAAD,CACEU,MAAO,IACPC,OAAQ,IACRC,OAAQ,CACNC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,KAGxC,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,SAASC,QAAQ,eAAeC,KAAK,iBACjD,kBAAC,IAAD,CAAOF,KAAK,SAASC,QAAQ,gBAAgBC,KAAK,aAClD,kBAAC,IAAD,CAASC,OAAQ,CAAEC,gBAAiB,SACpC,kBAAC,IAAD,CAASF,KAAK,gCAAgChB,KAAMH,EAAMG,KAAMmB,KAAK,cA0I5DC,E,kDApIb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,MAAQ,CACX,KAAO,CAAC,CACJ,IAAO,EACP,KAAQ,QACR,aAAgB,GAChB,cAAiB,GAEnB,CACE,IAAO,EACP,KAAQ,SACR,aAAgB,GAChB,cAAiB,GAEnB,CACE,IAAO,EACP,KAAQ,OACR,aAAgB,GAChB,cAAiB,GAEnB,CACE,IAAO,EACP,KAAQ,UACR,aAAgB,EAChB,cAAiB,GAEnB,CACE,IAAO,EACP,KAAQ,QACR,aAAgB,GAChB,cAAiB,GAEnB,CACE,IAAO,EACP,KAAQ,SACR,aAAgB,GAChB,cAAiB,GAEnB,CACE,IAAO,EACP,KAAQ,QACR,aAAgB,IAChB,cAAiB,GAEnB,CACE,IAAO,EACP,KAAQ,OACR,aAAgB,IAChB,cAAiB,GAEnB,CACE,IAAO,EACP,KAAQ,MACR,aAAgB,EAChB,cAAiB,IAGrB,SAAY,EACZ,UAAa,GAEf,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBA7DN,E,gEAiEjBC,MAAM,SAASC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAzB,GAC1C4B,QAAQC,IAAI,SAAW7B,EAAK8B,KAAKC,eAEnCP,MAAM,iBAAiBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAzB,GAClD4B,QAAQC,IAAI7B,Q,oCAIFE,GACZ8B,KAAKC,SAAS,CACZC,SAAUhC,M,wCAIK,IAAD,OAGZF,EAAOmC,KAAKC,UAAU,CAAE,iBAAoB,CAACC,OAAOL,KAAKX,MAAMa,aACnEN,QAAQC,IAAI7B,GACZwB,MAAM,sBACN,CACEc,OAAQ,OACRC,KAAMvC,EACNwC,QAAS,CACP,eAAgB,mBAChB,WAAc,gBAIjBf,MAAK,SAACgB,GAAD,OAAcA,EAASd,UAC5BF,MAAK,SAACzB,GACL4B,QAAQC,IAAI7B,GACZ,EAAKiC,SAAS,CACZS,UAAW1C,EAAK2C,mB,+BAKZ,IAAD,OAEP,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,2CACA,kBAAC,EAAD,CAAiB/C,KAAMgC,KAAKX,MAAMrB,OAClC,6BACA,kBAACgD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,iBAAX,gBACA,kBAACC,EAAA,EAAD,CAAOpC,KAAK,SAASF,KAAK,SAASuC,SAAU,SAACC,GAAD,OAAO,EAAKC,cAAL,UAAsBD,EAAEE,OAAOtD,SAAUuD,YAAY,kBAE3G,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKrC,oBAA5B,qBAEF,kBAAC4B,EAAA,EAAD,CAAOC,IAAI,QAAX,kBAAkCnB,KAAKX,MAAMqB,UAA7C,kBAAwEV,KAAKX,MAAMa,WAErF,kBAACY,EAAA,EAAD,CAAKC,GAAG,KACN,wDACA,kBAAC,EAAD,CAAiB/C,KAAMgC,KAAKX,MAAMrB,OAClC,8E,GA7HoB4D,a,kBCxBjBC,EAtBG,SAAChE,GACjB,OACE,kBAAC+C,EAAA,EAAD,KACE,4BAAI,mDACJ,4QACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACe,EAAA,EAAD,CAAMvB,MAAI,GACR,kBAACwB,EAAA,EAAD,sCACA,kBAACL,EAAA,EAAD,KAAQ,uBAAGM,KAAK,4EAA4EC,MAAO,CAACC,MAAO,YAAnG,iBAGZ,kBAACpB,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACe,EAAA,EAAD,CAAMvB,MAAI,GACR,kBAACwB,EAAA,EAAD,6BACA,kBAACL,EAAA,EAAD,KAAQ,uBAAGM,KAAK,kDAAkDC,MAAO,CAACC,MAAO,YAAzE,oBCoBLC,MA7Bf,SAAatE,GAAQ,IAAD,EACgBuE,mBAAS,KADzB,mBAkBlB,OAlBkB,UAmBhB,yBAAKC,UAAU,MAAMJ,MAAO,CAACK,gBAAiB,YAC5C,kBAAC,EAAD,MACA,6BACA,6BACA,6BACA,kBAAC,EAAD,QCrBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.dd764ef8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport { Container, Row, Col, Table, Form, FormGroup, Label, Input, Button } from 'reactstrap'\r\nimport {  ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\r\n\r\nconst RegressionTable = (props) => {\r\n  return (\r\n    <Table dark>\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Amount Spent</th>\r\n          <th>Send Discount</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          props.data.map((value, index) => {\r\n            return (\r\n              <tr key={index}>\r\n                <th scope=\"row\">{index + 1}</th>\r\n                <td>{value[\"amount_spent\"]}</td>\r\n                <td>{value[\"send_discount\"]}</td>\r\n              </tr>\r\n            )\r\n          })\r\n        }\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nconst RegressionGraph = (props) => {\r\n  return (\r\n    <ScatterChart\r\n      width={400}\r\n      height={400}\r\n      margin={{\r\n        top: 20, right: 20, bottom: 20, left: 20,\r\n      }}\r\n    >\r\n      <CartesianGrid />\r\n      <XAxis type=\"number\" dataKey=\"amount_spent\" name=\"Amount Spent\" />\r\n      <YAxis type=\"number\" dataKey=\"send_discount\" name=\"YES / NO\" />\r\n      <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n      <Scatter name=\"Amount Spent vs Send Discount\" data={props.data} fill=\"#8884d8\" />\r\n    </ScatterChart>\r\n  )\r\n}\r\n\r\nclass RegressionDisplay extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      \"data\":[{\r\n          \"key\": 1,\r\n          \"name\": \"James\",\r\n          \"amount_spent\": 50,\r\n          \"send_discount\": 0\r\n        },\r\n        {\r\n          \"key\": 2,\r\n          \"name\": \"Meghan\",\r\n          \"amount_spent\": 10,\r\n          \"send_discount\": 1\r\n        },\r\n        {\r\n          \"key\": 3,\r\n          \"name\": \"John\",\r\n          \"amount_spent\": 20,\r\n          \"send_discount\": 1\r\n        },\r\n        {\r\n          \"key\": 4,\r\n          \"name\": \"Jessica\",\r\n          \"amount_spent\": 5,\r\n          \"send_discount\": 1\r\n        },\r\n        {\r\n          \"key\": 5,\r\n          \"name\": \"Kevin\",\r\n          \"amount_spent\": 95,\r\n          \"send_discount\": 0\r\n        },\r\n        {\r\n          \"key\": 6,\r\n          \"name\": \"Juliet\",\r\n          \"amount_spent\": 70,\r\n          \"send_discount\": 0\r\n        },\r\n        {\r\n          \"key\": 7,\r\n          \"name\": \"Oscar\",\r\n          \"amount_spent\": 100,\r\n          \"send_discount\": 0\r\n        },\r\n        {\r\n          \"key\": 8,\r\n          \"name\": \"Mary\",\r\n          \"amount_spent\": 200,\r\n          \"send_discount\": 0\r\n        },\r\n        {\r\n          \"key\": 9,\r\n          \"name\": \"Tim\",\r\n          \"amount_spent\": 0,\r\n          \"send_discount\": 1\r\n        }\r\n      ],\r\n      \"formData\": 0,\r\n      \"predPoint\": 0\r\n    }\r\n    this.predictDiscount = this.predictDiscount.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('/time').then(res => res.json()).then(data => {\r\n      console.log(\"TIME: \" + data.time.toString())\r\n    });\r\n    fetch('/api/data/all').then(res => res.json()).then(data => {\r\n      console.log(data)\r\n    });\r\n  }\r\n\r\n  onInputChange(value) {\r\n    this.setState({\r\n      formData: value\r\n    })\r\n  }\r\n\r\n  predictDiscount() {\r\n    // let data = new FormData();\r\n    // data.append(\"arr_amount_spent\", [Number(this.state.formData)] );\r\n    let data = JSON.stringify({ \"arr_amount_spent\" :[Number(this.state.formData)] })\r\n    console.log(data)\r\n    fetch('/api/data/predict/1',\r\n    {\r\n      method: \"POST\",\r\n      body: data,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Connection': 'keep-alive'\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n    })\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      console.log(data)\r\n      this.setState({\r\n        predPoint: data.predictions\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n  \r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col sm=\"6\">\r\n            <h2>Custom Data</h2>\r\n            <RegressionTable data={this.state.data}/>\r\n            <br />\r\n            <Form>\r\n              <FormGroup>\r\n                <Label for=\"exampleAmount\">Amount Spent</Label>\r\n                <Input name=\"amount\" type=\"number\" onChange={(e) => this.onInputChange(`${e.target.value}`)} placeholder=\"enter number\" />\r\n              </FormGroup>\r\n              <Button onClick={() => this.predictDiscount()}>Predict Discount</Button>\r\n            </Form>\r\n            <Label for=\"blah\">Send Discount: {this.state.predPoint} , for Amount: { this.state.formData }</Label>\r\n          </Col>\r\n          <Col sm=\"6\">\r\n            <h2>Amount Spent vs Discount</h2>\r\n            <RegressionGraph data={this.state.data} />\r\n            <p>Note: 1 = Send Discount, 0 = No Discount</p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RegressionDisplay;","import React from 'react'\r\nimport {Container, Row, Col, Card, CardTitle, CardText, Button } from 'reactstrap'\r\n\r\nconst AboutComp = (props) => {\r\n  return (\r\n    <Container>\r\n      <h1><b>LOGISTIC REGRESSION</b></h1>\r\n      <p>Welcome to my project. I use logistic regression to determine which users should receive discount codes based on amount spent. I use gradient descent to create my model (though it is based off of a small set of custom data as seen below)</p>\r\n      <Row>\r\n        <Col sm=\"6\">\r\n          <Card body>\r\n            <CardTitle>Just Want to see the Codelab?</CardTitle>\r\n            <Button><a href=\"https://colab.research.google.com/drive/1slwE2MJMbi4L9J0YQMRIpiaIGhPA4E1C\" style={{color: \"inherit\"}}>Click Here</a></Button>\r\n          </Card>\r\n        </Col>\r\n        <Col sm=\"6\">\r\n          <Card body>\r\n            <CardTitle>See the GitHub Repo?</CardTitle>\r\n            <Button><a href=\"https://github.com/timothy-shee/Smart-Discounts\" style={{color: \"inherit\"}}>Click Here</a></Button>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\nexport default AboutComp\r\n\r\n","import logo from './logo.svg';\nimport './App.css';\n\nimport React, { useState } from 'react';\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\nimport classnames from 'classnames';\nimport RegressionDisplay from './components/regression-display'\nimport AboutComp from './components/about-comp'\n\nfunction App(props) {\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if(activeTab !== tab) setActiveTab(tab);\n  }\n\n  const navStyle = {\n    textAlign: \"center\"\n  }\n  const navItemStyle = {\n    display: \"inline-block\",\n    float:\"none\",\n    zoom:1\n  }\n  const navItemLinkStyle = {\n  }\n\n  return (\n    <div className=\"App\" style={{backgroundColor: \"#ebebeb\"}}>\n      <AboutComp />\n      <br />\n      <br />\n      <br />\n      <RegressionDisplay />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}